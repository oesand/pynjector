name: Auto Release 🚀

on:
  push:
    tags:
      - "v*.*.*"

jobs:
  check_admin:
    runs-on: ubuntu-latest
    steps:
      - name: Check if triggered by admin
        id: check_admin
        run: |
          permission=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/collaborators/${{ github.actor }}/permission" \
            | jq -r .permission)
          if [ "$permission" = "admin" ]; then
            echo "is_admin=true" >> $GITHUB_OUTPUT
          else
            echo "is_admin=false" >> $GITHUB_OUTPUT
          fi

      - name: Run if admin
        if: steps.check_admin.outputs.is_admin == 'true'
        run: echo "Workflow triggered by an admin - ${{ github.actor }}"

      - name: Fail if not admin
        if: steps.check_admin.outputs.is_admin != 'true'
        run: |
          echo "Error: This workflow can only be triggered by organization admins"
          exit 1

  release:
    needs: check_admin
    if: needs.check_admin.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: 🛎 Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel twine build

      - name: 🔄 Update version in pyproject.toml
        run: |
          TAG_VERSION="${GITHUB_REF_NAME#v}"  # Strip 'v' prefix
          sed -i "s/^version = \".*\"/version = \"$TAG_VERSION\"/" pyproject.toml

      - name: 📌 Commit updated version
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"
          git commit -am "🔄 Update version to ${{ github.ref_name }}"
          git push origin HEAD:main

      - name: 📦 Build package
        run: python -m build

      - name: 🚀 Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: twine upload dist/*

      - name: 🏷 Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "${{ github.ref_name }}" \
            --title "${{ github.ref_name }}" \
            --generate-notes
